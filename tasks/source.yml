---

- name: "source: DEBUG Print variables"
  vars:
    msg: |
         url [ {{ integrity_source_url }}/{{ integrity_source_file }} ]
         dest [ {{ integrity_source_dest }}/integrity-{{ integrity_source_file }} ]
  debug:
    msg: "{{ msg.split('\n') }}"
  when: integrity_debug

- name: "source: Test presence of {{ integrity_source_dest }}/integrity-current.lock"
  stat:
    path: "{{ integrity_source_dest }}/integrity-current.lock"
  register: integrity_current_lock

- debug: msg="DEBUG integrity-current.lock file is present."
  when:
    - integrity_current_lock.stat.exists
    - not integrity_source_ignore_current_lock
    - integrity_debug

- name: "source: Create directory for the source code {{ integrity_source_dest }}"
  file:
    state: "directory"
    path: "{{ integrity_source_dest }}"
  tags: integrity_source_extract

- name: "source: Download {{ integrity_source_url }}/{{ integrity_source_file }}"
  get_url:
    url: "{{ integrity_source_url }}/{{ integrity_source_file }}"
    dest: "{{ integrity_source_dest }}/integrity-{{ integrity_source_file }}"
  tags: integrity_source_extract

- name: "source: Check existence of {{ integrity_source_dest}}/integrity-{{ integrity_source_file }}"
  stat:
    path: "{{ integrity_source_dest }}/integrity-{{ integrity_source_file }}"
  register: integrity_source_file_downloaded
  tags: integrity_source_extract

- debug: msg="integrity_source_file_downloaded {{ integrity_source_file_downloaded }}"
  when: integrity_debug
  tags: integrity_source_extract

- name: "source: Extract sources to {{ integrity_source_dest }}"
  unarchive:
    src: "{{ integrity_source_dest }}/integrity-{{ integrity_source_file }}"
    dest: "{{ integrity_source_dest }}"
    remote_src: yes
  when: integrity_source_file_downloaded.stat.exists
  tags: integrity_source_extract

- name: "source: Create symbolic link integrity to {{ integrity_source_dir }}"
  file:
    src: "{{ integrity_source_dest }}/{{ integrity_source_dir }}"
    dest: "{{ integrity_source_dest }}/integrity"
    state: "link"
    force: yes
  when: (not integrity_current_lock.stat.exists) or
        (integrity_source_ignore_current_lock)
  tags: integrity_source_link

- name: "source: Create working directory for the scripts {{ integrity_source_dest }}/integrity-work"
  file:
    state: "directory"
    path: "{{ integrity_source_dest }}/integrity-work"

- name: "source: Copy script to working directory"
  copy:
    src: "{{ integrity_source_dest }}/integrity/{{ item }}"
    dest: "{{ integrity_source_dest }}/integrity-work"
    remote_src: yes
  with_items:
    - integrity
  when: not ansible_check_mode
  changed_when: False

- name: "source: Which bash"
  command: "which bash"
  register: integrity_which_bash
  changed_when: False

- debug: msg="Bash path = {{ integrity_which_bash.stdout }}"
  when:
    - integrity_debug
    - not ansible_check_mode

- name: "source: Patch {{ integrity_which_bash.stdout }} in {{ integrity_source_dest }}/integrity-work/integrity"
  lineinfile:
    dest: "{{ integrity_source_dest }}/integrity-work/{{ item }}"
    regexp: "#!"
    line: "#!{{ integrity_which_bash.stdout }}"
  with_items:
    - integrity
  when: not ansible_check_mode
  changed_when: False

# EOF
...
