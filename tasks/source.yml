---

- name: "source: DEBUG Print variables"
  vars:
    msg: |
         url [{{ integrity_source_url }}/{{ integrity_source_file }}]
         dest [{{ integrity_source_dest }}/integrity-{{ integrity_source_file }}]
  ansible.builtin.debug:
    msg: "{{ msg.split('\n') }}"
  when: integrity_debug|bool

- name: "source: Test presence of {{ integrity_source_dest }}/integrity-current.lock"
  ansible.builtin.stat:
    path: "{{ integrity_source_dest }}/integrity-current.lock"
  register: integrity_current_lock

- name: "source: Debug integrity-current.lock file is present."
  ansible.builtin.debug:
    msg: "source: DEBUG integrity-current.lock file is present."
  when:
    - integrity_current_lock.stat.exists
    - not integrity_source_ignore_current_lock|bool
    - integrity_debug|bool

- name: "source: Create directory for the source code {{ integrity_source_dest }}"
  ansible.builtin.file:
    state: directory
    path: "{{ integrity_source_dest }}"
    mode: "{{ integrity_source_dest_mode }}"
  tags: integrity_source_extract

- name: "source: Download {{ integrity_source_url }}/{{ integrity_source_file }}"
  ansible.builtin.get_url:
    url: "{{ integrity_source_url }}/{{ integrity_source_file }}"
    dest: "{{ integrity_source_dest }}/integrity-{{ integrity_source_file }}"
    checksum: "{{ integrity_source_checksum }}"
  tags: integrity_source_extract

- name: "source: Check existence of {{ integrity_source_dest }}/integrity-{{ integrity_source_file }}"
  ansible.builtin.stat:
    path: "{{ integrity_source_dest }}/integrity-{{ integrity_source_file }}"
  register: integrity_source_file_downloaded
  tags: integrity_source_extract

- name: "source: Debug integrity_source_file_downloaded."
  ansible.builtin.debug:
    msg: "source: integrity_source_file_downloaded {{ integrity_source_file_downloaded }}"
  when: integrity_debug|bool
  tags: integrity_source_extract

- name: "source: Extract sources to {{ integrity_source_dest }}"
  ansible.builtin.unarchive:
    src: "{{ integrity_source_dest }}/integrity-{{ integrity_source_file }}"
    dest: "{{ integrity_source_dest }}"
    remote_src: true
  when: integrity_source_file_downloaded.stat.exists
  tags: integrity_source_extract

- name: "source: Create symbolic link integrity to {{ integrity_source_dir }}"
  ansible.builtin.file:
    state: link
    src: "{{ integrity_source_dest }}/{{ integrity_source_dir }}"
    dest: "{{ integrity_source_dest }}/integrity"
    force: true
  when: (not integrity_current_lock.stat.exists) or
         integrity_source_ignore_current_lock|bool
  tags: integrity_source_link

- name: "source: Create working directory for the scripts {{ integrity_source_dest }}/integrity-work"
  ansible.builtin.file:
    state: directory
    path: "{{ integrity_source_dest }}/integrity-work"
    mode: "{{ integrity_source_dest_mode }}"

- name: "source: Copy script to working directory"
  ansible.builtin.copy:
    src: "{{ integrity_source_dest }}/integrity/{{ item }}"
    dest: "{{ integrity_source_dest }}/integrity-work"
    mode: "{{ integrity_bin_mode }}"
    remote_src: true
  loop:
    - integrity
  when: not ansible_check_mode
  changed_when: false

- name: "source: Which bash"
  ansible.builtin.command:
    cmd: which bash
  register: integrity_which_bash
  changed_when: false

- name: "source: Debug bash path"
  ansible.builtin.debug:
    msg: "source: Bash path = {{ integrity_which_bash.stdout }}"
  when:
    - integrity_debug|bool
    - not ansible_check_mode

- name: "source: Patch {{ integrity_which_bash.stdout }} in {{ integrity_source_dest }}/integrity-work/integrity"
  ansible.builtin.lineinfile:
    dest: "{{ integrity_source_dest }}/integrity-work/{{ item }}"
    regexp: "#!"
    line: "#!{{ integrity_which_bash.stdout }}"
  loop:
    - integrity
  when: not ansible_check_mode
  changed_when: false

# EOF
...
